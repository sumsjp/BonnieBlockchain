 I'm going to regret saying this. I don't love every day of my job. You can't say that. I feel like he's judging me. It's a horrible story. You're not going to lose your job to AI. You're going to lose your job to somebody who uses AI. Your company is not going to go out of business because of AI. Your company is going to go out of business because another company used AI. There are no such things that are great that was easy to do. I'd rather improve you than give up on you. Torture you into greatness. Oftentimes, they're so close. Don't give up. Other people's disasters, other people's tragedies. Nothing makes us happier than that. I just want it. You're doing it wrong. You crazy person. Gosh, they're so dumb. If you want success, then take a look away. He was going to ask me for the update on Stripe and I was explaining. You said, oh, so it's like software-defined networking, but for money. That was still ricocheting around in my mind. That's where we got to this idea for software-defined services. I hope we don't have to pay a licensing fee for that. Zero equity for that good idea. You guys are going to know, okay, I was thinking about this. Tesla's earnings were, of course, yesterday and Elon announced that I think Tesla is going to have 85,000 H100s by the end of this year. I was just reflecting on quite a success to build a business where CEOs compete with each other to announce who has spent more buying your product. So I think you've done something quite impressive. But anyway, I actually want to start out talking a little bit about- All of my CEO friends, they all have the most. I want to start out talking a little bit about a remark you made at a Stanford event recently. You said, I wish upon you ample doses of pain and suffering. Elaborate. Well, let's see. There's a phrase that said you should choose your career based on your passion. And usually people connect passion with happiness. And I think there's something missing in that. Nothing there is wrong, but there's something missing. And the reason for that is because if you want to do great things, and I know this to be true about you creating Stripe. And by the way, this is one of the world's finest CEOs, young as he may be. You guys know I've met a lot of CEOs. I've heard about a lot of companies. And this is genuinely one of the world's great visionary companies. And so anyways, I always just want to say that. The reason why I love what- No more compliments allowed. It makes me, it makes us terribly uncomfortable. I know. I could tell. I could see him. He's starting to sweat. And so the thing is when you want to build something great, it's not easy to do. And when you're doing something that's not easy to do, you're not always enjoying it. I don't love every day of my job. I don't think every day brings me joy, nor does joy have to be the definition of a good day. And every day I'm not happy. Every year I'm not happy about the company. But I love the company every single second. And so I think that what people misunderstand is somehow the best jobs are the ones that bring you happiness all the time. I don't think that that's right. You have to suffer. You have to struggle. You have to endeavor. You have to do those hard things and work through it. In order to really appreciate what you've done. And there are no such things that are great that was easy to do. And so by definition, I would say therefore, I wish upon you greatness, which by my way of saying it, I wish upon you plenty of plain suffering. Anything in your upbringing that taught you that idea or is it just somehow innate to your makeup? I didn't realize I had to lay down for this. I'm about to tell you things I've never told anyone, not even my family. I was an immigrant. And when I came in 1973, I was nine. My older brother was almost 11. And this was a foreign country. And there was nothing easy about that. And we also grew up in a really, really terrific parents. But we weren't wealthy. And so they worked hard. They work hard today. And so they passed along a lot of life lessons by working hard. I had all kinds of jobs. We went to a school that included a lot of chores. It was in Kentucky. Yeah, Kentucky. Oneida Baptist Institute. And I don't think it's the same as MIT. That I is not the same. It's the same word. But it's different. It's a different type of institute. But my institute required you to go to school. And it was a dormitory. And so there were a lot of chores. I was the youngest kid in school. And so all the other kids got the hard work. They had to work in the tobacco farm. And I got the easy job. I was nine years old. And so after they left, I had to clean all the bathrooms. I never felt that I got the easy job. Because what they left behind was, you can't unsee that kind of stuff. But that was my job. And that was my job. And so I did it delightfully. And then I had plenty of other jobs. And Denny's was one of them. And I started out as a dishwasher and became a busboy and became a waiter. And I loved every one of them. I loved every one of them. Somehow, I've always found, I want to say joy, but that's not quite right. Everything that I was doing, I wanted to do the best I could. And maybe that was kind of ingrained from the very beginning. But I was definitely the best bathroom cleaner the world's ever seen, I'm sure. So if we fast forward just a little bit to the Nvidia today, how large is your leadership team? How large is your leadership team? Nvidia's leadership team is 60 plus, 60 people. Yeah. And they all report to you? Yeah, they all report to me. 60 direct reports. 60 direct reports, yeah. Which is not conventionally considered the best practice. I agree that the best practice kind of- I'm certain that's the best practice. It's not conventional. But I am certain it's the best practice. And by the end of this, I'm going to convince all of you to have 60 people on your direct reports. The floor is yours. All right. The reason- first of all, the reason is because the layer of hierarchy in your company really matters. Information really matters. I believe that your contribution to the work should not be based on the privileged access to information. I don't do one-on-ones. And I don't- my staff is quite large. And almost everything that I say, I say to everybody all at the same time. And the reason for that is because I don't really believe there's any information that I operate on that somehow only one or two people should hear about. And these are the challenges of the company. Or this is the problem I'm trying to solve. Or this is the direction we're trying to go into. These are the new endeavors. This isn't working. That's working well. And so all of this type of information, everybody should be able to hear. I love that everybody's working off of the same song sheet. I love that there's no privileged access to information. I love that we're able to all contribute to solving a problem. And when you have 60 people in a room, and oftentimes, well, my staff meetings are once every other week. It's all based on issues, whatever issues we have. Everybody's there working on it at the same time. Everybody heard the reasoning of the problem. Everybody heard the reasoning of the solution. Everybody heard everything. And so that empowers people. I believe that when you give everybody equal access to information, it empowers people. And so that's number one, empowering. Number two, if a CEO's direct staff is 60 people, the number of layers you've removed in a company is probably something like seven, you know, depending on how it is. 60 at every layer or only 60? As in like, if I'm one of the fortunate 60, do I also have 60 direct reports? No. I also don't think that that's scalable downward. And the reason for that is because you need more and more supervision depending on certain levels. And at the E-staff level, if you're so unfortunate to be serving on NVIDIA's E-staff, it's very unlikely you need a lot of managerial, you know. And so I rarely find myself having to stand up for conventional wisdom. If I was the kind of steel man on the other side, I'd say, well, one-on-ones are where you provide coaching, where you maybe talk through goals together, personal goals, career advancement, what have you, where maybe you give feedback on something that you see somebody systematically not doing so well and so forth. There's all these things that kind of one is, again, conventionally, supposed to do in the one-on-one. Do you not do those things or do you do them in a different way? Really good question. I do it right there. I give you feedback right there in front of everybody. And in fact, this is really a big deal. First of all, feedback is learning. Feedback is learning. For what reason are you the only person who should learn this? Now, you created the conditions because of some mistake that you made or silliness that you brought upon yourself. We should all learn from that opportunity. So you created the conditions, but we should all learn from it. Does it make sense? And so for me to explain to you why that doesn't make sense or how I differ from it, half the time I'm not right. But for me to reason through it in front of everybody helps everybody learn how to reason through it. And so the issue, the problem I have with one-on-ones and taking feedback aside is you deprive a whole bunch of people that same learning. Learning from mistakes, other people's mistakes, is the best way to learn. Why learn from your own mistakes? Why learn from your own embarrassment? You got to learn from other people's embarrassments. That's why we have case studies, isn't that right? We're trying to read from other people's disasters, other people's tragedies. Nothing makes us happier than that. Have you succeeded in getting other leaders at NVIDIA to adopt this practice or is that difficult? I give people the opportunity to decipher themselves, but I really discourage one-on-ones. I really discourage one-on-ones. Nothing is worse than the idea that somebody says, oh, Jensen wants us to do this. Why does that have to be said to anybody? Everybody should know. Or somebody said that, E-staff said that. Nothing drives me nuttier than that. You once told me that you really didn't like firing people and very seldom did it. Can you elaborate on that? Well, I'd rather improve you than give up on you. When you fire somebody, well, a lot of people say, well, it wasn't your fault or I made the wrong choice. I used to clean bathrooms and now I'm the CEO of a company. I think you can learn it. I'm pretty certain you can learn this. And there are a lot of things in life that I believe you can learn and you just have to be given the opportunity to learn it. I have the benefit of watching a lot of smart people do a lot of things. I'm surrounded by 60 people. They're doing smart things all the time and they probably don't realize it, but I'm learning constantly from every single one of them. And so I don't like giving up on people because I think they could do better. I think they could improve. And so it's kind of tongue in cheek, but people know that I'd rather torture them into greatness. That was the phrase that I was hoping to uncover. Yeah, I remember you mentioned that. Yeah, so I'd rather torture you into greatness because I believe in you. And I think coaches that really believe in their team torture them into greatness. And oftentimes they're so close. Don't give up. They're so close. You know, greatness kind of comes all of a sudden one day and he's like, I've got it. Do you know what I'm saying? That feeling that you didn't get it yesterday and all of a sudden one day something clicking. Oh, I got it. Could you imagine you gave up that just that moment right before you got it? You know, so I don't want you to give up on that. So I'll just keep torturing you. How and how's your work-life balance? Well, it depends on who you ask. I think my work-life balance is really great. It's really great. I work as much as I can. And. I feel like he's judging me. You know, I have I'm older than you. I have more wisdom than you. So what? These are all the highlights from our conversations that I think more people should get to hear. Well, I work as I work from the moment I wake up to the moment I go to bed. And I work seven days a week. When I'm not working, I'm thinking about working. And when I'm working, I'm working. And so. And I sit through movies, but I don't remember because I'm thinking about work. But my work is not, as you know, it's not working as in there's this problem and you're trying to solve this problem. You're thinking about what the company can be. And are there things that we could do even better? Or sometimes it's just trying to solve a problem, you know, but sometimes you're imagining the future and boy, we did this and that. And it's working. You're fantasizing. You're dreaming. You're right. I mean, that's incredible. How well so to get to concretize this a little bit and then we will get to talk about AI, which I hear is a thing these days. But it's a thing. Yeah. Officially a thing. TM. But to concretize this a bit, like just what's your what does the day in Jensen's life look like? Like, well, I used to I used to wake up at five. These days I wake up at six because of my dogs. And the reason why six is somehow we decided that six o'clock is when they should wake up. I don't know what it is. I don't mind waking anybody up, but I feel guilty when I wake the puppies up. And it actually burdens me, you know, so I don't want to move. You know, they pick up on the vibration in the house and it wakes them up. And so we kind of stay we stay in bed and I just read in bed until six o'clock. And it's time. But you're thinking about GPUs. Oh, yes. Yeah, yeah, sure. I'm obsessed about GPUs. I mean, what can you do? And then the day is all, I guess, group meetings because it can't be one meeting. Yeah, I get my work done before I go to work. And then when I get to work. How many meetings in a typical day? Pretty much all day long, you know. And so I select the meetings that are really important to me. I try not to have I try not to have regular meetings, regular operational meetings, because I've got amazing people in the company who are doing regular operational meetings. We're pitch hitters. You know, CEOs are pitch hitters. We should be working on the things that nobody else can or nobody else is. So you're jumping into projects that are stock or off track or new ideas. Wherever we can move the needle. No reporting, no reporting meetings. I hate reporting meetings. They don't report to me. And just problem meetings. And so problem meetings or idea meetings or brainstorming meetings or creation meetings or whatever it is. Those are the meetings I go to. And so usually I call them. I try I try really hard not to have outlook manage my life. And so we purposely decide what kind of things that we want to do. We want to work on. And so I try to live a life of purpose and I manage my time accordingly. You used the phrase once zero billion dollar markets, that zero billion dollar markets are your favorite markets. What do you mean? If you take a step back, our purpose, almost all of our purposes should be to go and do something that has never been done before, that is insanely hard to do, that if you achieve it could make a real contribution. I know your company does that. I try to do that. And if that's the case, it hasn't been done before. It's incredibly hard to do. It's probably and it's never been done before. That market is probably zero billion dollars in size because it has never been done before. I'd rather be a market maker, market creator than a market taker. You know, to create something new that never existed before versus thinking about share. I don't love thinking about share. I don't like the concept of share. I'd like to think that we can come up with something that is zero billion dollars. And a zero billion dollar market is a good way to cause the company to think about how to go create something for the first time. Most of the value we're going to create over the next several decades are likely not limited by physical things. And so this is a pretty extraordinary time. And so with this concept of zero billion dollar markets, if I'm again at Nvidia, am I coming to you with some proposal for some project and maybe there's several billion dollars of CapEx involved or, you know, many it's a many year pursuit or something and there are no customers for it today. There's no demand that I can demonstrate for it. And you guys are just making a gut call to say that, yes, nobody's doing this today. We think they could. We think they should. And therefore, we're going to pursue it. Really close. Yeah, it's kind of like that. And it's a gut call in the sense that your intuition says something as a starting thesis. But then you have to reason through it. And the reasoning of it is much, much more important to me than a spreadsheet. I hate spreadsheets because you can make spreadsheets do whatever you want. You can make any chart you want out of a spreadsheet. You just got to type in some numbers. And so I don't love spreadsheets for that reason. I love words for that reason. The words are reasoning. Tell me, how did you reason through this? And what's our intuition? Why do we believe that matters? Why do we think it's hard? I like hard things because it takes a long time to do. And if it takes a long time to do, a lot of people who are less committed probably won't do it. If it's really, really hard to do, it takes a long time to do. It takes a really resilient and a really dedicated, really committed person to go after it. And if it also takes a long time to do, you can kind of flounder around for a couple years, nobody noticed. And so I could be incompetent for several years. And everybody goes, well, who saw it? We invented this idea called accelerated computing. We pioneered this approach. It was an incredible disaster on me. And it kind of went like this. This is one of your zero billion dollar markets you went after. Yeah. And it was a disaster. Yeah. Because it was a zero billion dollar we went after, but it cost so much to go after that zero billion dollar market, it actually crushed the one billion dollar market we were enjoying. And the reason for that is because CUDA added a ton of cost into our chips, but there were no applications. And there are no applications, customers don't value the product, and they won't pay you a premium for it. And if people aren't willing to pay you for it, but your cost went up, then your gross margins get crushed. And we got our market cap was low. And it went down to really low. It was like, I think our market cap went down to like a billion dollars or something like that. I wish I bought it. We really believe that that accelerated computing was going to be able to solve problems that that normal computers couldn't. And if we wanted to extend the architecture to be much more general purpose, we had to make we had to make that we had to make that sacrifice. And so I deeply believed in the mission of our company. I deeply believed in its opportunities. I deeply, deeply believe that people were wrong. They just didn't appreciate what we built. I deeply believed it. And so weren't analysts and the board and employee like you've torpedoed this existing revenue stream, you've this, you know, hype thing that, you know, you're selling a lofty dream around that nobody seems to actually want. The business is really suffering. So talk us through that. You believed. I just go something like this. Oh, gosh, they're so dumb. You go back to what you believe. And if you believe something, the board puts pressure on you during this. They I start every conversation with what I deeply believed. And and and they believed it, you know, because they saw me deeply believe it. And I reasoned about it. It wasn't it wasn't it wasn't like it was a spreadsheet. And therefore you got to believe the spreadsheet. They had to believe the reasoning, the words. How long did it take it to start working? Probably 10 years. It wasn't that long. Yeah, 10 years. It comes and goes. 10 years less than a third of your tenure. Yeah, it comes and goes. It was I barely remembered it. You know, the suffering, I barely remembered it. Could could Nvidia be as successful in AI without Tudor? No, impossible. It was it is it is potentially one of the most important inventions in modern computing. We invented this idea called accelerated computing. And and the idea is so simple, but deeply profound. It says the vast majority, a small percentage of the code of programs. Occupies consumes 99.999 percent of the runtime. And this is true for a lot of very important applications. And that that small little kernel, that small little kernel, or, you know, some several kernels. Can be accelerated and they tend they, you know, it's not all just parallel processing. It's not as simple as that. But the idea is that we can take that kernel, that piece of software, that part of the software, and accelerate the living daylights out of it. And and today, when Moore's laws run its course and CPU scaling is basically stopped. And if we don't accelerate every software, you're going to see extraordinary computation inflation. Because the amount of computation the world does is doubling every year still. And yet, if CPUs and general purpose computers are not increasing in performance because it's stopped, then what's your alternative? Or your cost of computing is going to keep going up exponentially. I got checked against my core beliefs every day. I still do. And you've got check against it. The first principles by which you reasoned about your strategies. The first principles by which you reasoned about your strategies. Those first principles are easy to remember. And it's not a long list. And now the question is, are those principles, did they change in some fundamental way? Are external conditions such that they no longer matter as much as before? Did somebody else solve the problem? And therefore, that problem has now disappeared. You know, is it, there will never be any need? You got check it, right? Constantly. That's number one. Got check. First of all, you really have to be careful to distill down the first principles instead of, I want something. That's stubbornness. You can't reason about it. I just want it. We're not five-year-olds, right? And so, you got to reason about it. Number one. Number two, you have to be clever. And so, we found ways to monetize, even in a small way, CUDA. And so, we looked everywhere for applications. We found an application with CT reconstruction. We found an application with seismic processing. We found another application with molecular dynamics. And so, we're constantly looking for applications. They didn't make it a home run, but it sustained us. Just enough. Just enough. And bought us time for it to really happen. Yeah. Okay. So, let's talk about AI. I need just to kind of do some math to ground things here. Let's just say that the total sort of compute capacity of all GPUs in the world today is X. What do you think, what do you think, what multiple of X will we be at in five years? First of all, you know that I'm going to regret saying this. And this is be... I'm a public company, you crazy person. See, this is... This is... How nice is it to be private? Safe to say considerably more. Well, let's reason about it, shall we? Okay. So, let's reason about it. Let's reason our way through. Okay. So, first of all, it goes like this. The world has installed about a trillion dollars worth of data centers. Those trillion dollars worth of data centers use us general purpose computing. General purpose computing is run as course. We cannot continue to process that way. And so, the world is going to accelerate everything. Data processing, you name it. Okay. And so, we're going to accelerate everything. When we accelerate everything, every single data center, every single computer will be an accelerated server. Well, there's about a trillion dollars worth of computers if we don't grow at all over the next, call it four years that we have to go replace. Four years, six years, bigger number of years. But if the computer industry continues to grow at some 20% or so, we'll probably have to replace over the course of next, you know, bigger number of years about two trillion dollars worth of computers with accelerated computing. So, just make that GPUs. Okay. That's number one. And this is the second part. This is the reason why all of you, Stripe, you're onto something just absolutely monumental. This idea, this idea called, and you know, you've heard me say an industrial revolution. Let me tell you why. We are producing something for the very first time that has never been produced before. And we're producing at an extremely high volume. And the production of this thing requires a new instrument that never existed before. It's a GPU. And the thing that we're producing for the very first time, for the mathematicians and all the computer scientists in the room, for all of you, you know that we're producing tokens. We're producing floating point numbers at high volume for the first time in history, and the floating point numbers have value. The reason why they have value is because it's intelligence. It's artificial intelligence. You can take these floating point numbers, you reformulate it in such a way that it turns into English, French, proteins, chemicals, graphics, images, videos, robotic articulation, steering wheel articulation. We're producing tokens at extraordinary scale. Now we've discovered a way, through all of the work that we do with artificial intelligence, to produce tokens of almost any kind. So now the world is going to produce an enormous amount of tokens. Now these tokens are going to be produced in new types of data centers. We call them AI factories. Back in the last industrial revolution, water comes into a machine. You light the water on fire, right? Turn it into steam, you know, and then it turns into electrons. Atoms come in, electrons go out. In this new industrial revolution, electrons come in and floating point numbers come out. And just like the last industrial revolution, nobody understood why these electricity is so valuable and is now sold, right? Market it kilowatt hours, you know, per dollar. And so now we have, you know, million tokens per dollar. And so that same logic is as incomprehensible to a lot of people as the last industrial revolution, but it's going to be completely normal in the next 10 years. Well, these tokens are going to create new products, new services, enhance productivity on a whole slew of industries, a hundred trillion dollars worth of industries on top of us. And so this industry is going to be gigantic. And in order to monetize that, transact that, you're going to need Stripe. And so I tell you, this is one of my favorite companies. The first time I met Patrick, he had to explain to me, I was, first of all, it was so complicated. I'm trying to refine the descriptions over time, but you know, I'm a complicated business in no matter what. But nonetheless, I was so inspired by it. It's incredible what you guys have built. In 2012, AlexNet was computer vision, ImageNet, image recognition, 82% or something like that accuracy. Over the next almost not quite 10 years, I think it was like seven years, every single year, the accuracy error reduced in half. Every year, the error reduced in half, or otherwise known as Moore's Law. So you double the performance, you double the accuracy, and you double its believability every single year. Over the course of seven years, it's now superhuman. Same thing with speech recognition, same things with natural language understanding. We want to know, we want to believe, not know, we want to believe that the answer that's being predicted to us is accurate. We want to believe that. And so the industry is going to chase that believability or that accuracy and double its accuracy two X every year. I believe that's going to be the same thing with natural language understanding. And of course, the problem space is a lot more complicated. But I have every certainty that we're going to double its accuracy every single year to the point where it is so accurate. And we've largely tested across many of your examples when you interact with it, that you go, you know what, this is really, really good. I believe the answer that it's producing for me. That condition is very important. The second thing is this. Today's language models, today's AI, and everything that we've shown are one shot. And yet, you and I both know that there are many things that we think about that are not one shot. You have to iterate. And so how do you come up, how do you reason about a plan? How do you come up with a strategy to solve a problem? Maybe you need to use tools. Maybe you have to look up some proprietary data. Maybe you have to do some research, in fact. Maybe you have to ask another agent. Maybe you have to ask another AI. Maybe you have to be human in a loop. Ask a human. Trigger an event. Send an email to somebody or text to somebody. Get a response before you can move on to the next step of that plan. And so a large language model has to iterate and think of a plan. That's not a one shot thing. And once it comes up with a plan, as it traverses that graph, there's a whole bunch of language models that are going to get instantiated and initiated. And so I think your future models are going to iterate. And so instead of just a one shot model, it's going to be a planning model with a whole bunch of other models around it that are particularly good at particular skills. And so I think we have long ways to go. If you're not engaging AI actively and aggressively, you're doing it wrong. You're not going to lose your job to AI. You're going to lose your job to somebody who uses AI. Your company is not going to go out of business because of AI. Your company is going to go out of business because another company used AI. There's no question about that. And so you have to engage AI as quickly as possible. You have to engage AI as quickly as possible so that you can do things that you think cost too much to do. For example, if the marginal cost of intelligence was practically zero, there are a lot of things that you would do now that you wouldn't have done otherwise. And so notice how often we do search and these days notice how often we ask questions. And even if I know the answer, I'll just ask it anyways, just to see what it comes up with. And so I think we want that to happen. We want the marginal cost of these type of activities to be as low as possible so that you use it in abundance. Second, if you could use AI to be productive, you know that productive companies leads to higher earnings. Higher earnings leads to more employment. More employment leads to more social growth. And so there's a lot of reasons to want to drive productivity into companies. Apart from just changing your manufacturing plans and your CapEx plans, how has AI changed how Nvidia works internally? We were one of the first technology companies to invest in our own AI supercomputers. We can't design a chip anymore without AI. At night, our AIs are exploring design spaces vast and wide that we would never do ourselves because it costs too much money to explore. And so our chips are so much better. Because of an AI, we can reduce the amount of energy used for our chips. It's higher performance. Our software, we can't write software without AI anymore. We have to explore all the, you know, the design space of optimizing compilers is too large. We use AIs to file bugs. So our bugs database actually tells you what's wrong with the code, who's likely involved, and activates that person to go fix it. And so I think we, I want everybody, every organization in our company to use AI very aggressively. I want to turn Nvidia into one giant AI. How great would that be? And then I'll have work-life balance. Are there any favorite examples you've heard of businesses and maybe in some kind of unexpected sector, some unexpected use case, where you feel they kind of can serve as a poster child for some of the dynamics you're describing, where they've really realized some of this opportunity? Well, the biggest surprise of AI, that shouldn't be a surprise, for a lot of people is that when we say it's a large language model, the word language doesn't mean human language only. And it doesn't mean English only or French only or, you know, or Irish only. And of course they can learn the language of life. Of course they can learn the, and if you could, if a language model can understand sound, which is a sequence, time series, it's a sequence, why can't it learn robotics articulation, which is a sequence? You just have to figure out how to tokenize it. And to this point, and you know, in being one big AI, is the future one of 100,000 models or 100 million models, or is the future one of one model and just like a model that does all the things? I think that it would be great to have supermodels that help you reason about things in general. But for us, for all companies that have very specific, domain-specific expertise, we're going to have to train our own models. And the reason for that is because we have a proprietary language, that difference between 99% and 99.3% is the difference between life and death for us. And so it's too valuable to us. No different than fraud detection for you. It's too important to you. Lisa Su is your first cousin once removed. Yes. Yeah. She's terrific. She's amazing. And AMD is now... She's the CEO of AMD, by the way. Yeah. And AMD is now one of your competitors in the GPU space. No. We're family. Okay. We're all in the industry. Okay. We're all in the industry. One of your partners in the industry. Yeah. Yeah. Okay. We buy from AMD. What's going on in the water? How did we end up with two of the... Or it would be the two most important GPU companies being run by close relatives? What's going on? You got to keep it close to the family. No. I have no idea how it happened. We didn't grow up together. And I didn't know... That makes it even more interesting, right? Yeah. We didn't know each other until she was at IBM. And her career is incredible. You've been operating in Silicon Valley since the early 90s. Yes. How has Silicon Valley culture changed in that time? When I first started Nvidia, I was 29 years old. And I was 29 years old with acne. And you go talk to your... Talk to your... Go recruit law firms and VCs. And I got a big zit on my forehead. And I don't have one today, so I feel comfortable talking about it. But it could happen. And so anyways, you feel rather insecure because most of CEOs back then wore suits. And they're quite accomplished. And they sound like adults. And they use big words. They talk about business and things like that. So when you're young, you feel rather intimidated. You're surrounded by a bunch of adults. Well, now, if you don't have acne, I don't think you deserve to start a company. We've enabled younger people to be extraordinary. I think the young generation of CEOs, the type of things that you guys know at such a young age is really quite extraordinary. I mean, it took me decades to learn it. I think a lot of good things could be made. Good things are made with operational excellence. And you can't make extraordinary things through just operational excellence. And the reason for that is because a lot of the great things in your body of work, in the products that you make, the company you created, the organizations that you've nurtured, it takes loving care. And you can't even put it in words. How do you put loving care in an email? You know, and for people to go, oh, I know exactly what to do. You can't put that in a business process, loving care. Is love and care kind of an Nvidia catchphrase? Well, I use love fairly abundantly, and care I use abundantly. That's why we talk a lot about craft and beauty. Yeah, right. You have to use these words because in a lot of ways, there are no other words to describe it. You can't put in numbers. You can't write in the product specification. The product specification says, I want you to build something great. That's incredibly beautiful. And great, great craft. You can't specify these things. Actually, your customers, even though they didn't say it, they might not have the words to say it, but when they experience it, they know it. There's no question. Stripes work has beauty, has elegance, has simplicity. Simplicity is not simple, as you guys know. Simplicity and simple are not the same thing. And it has elegance, and it solves the problem, but just enough. It burdens you, but not too much. And that balance is hard to find. And you can't specify that. You just feel your way there. When you have a team that's with you that feels the way they're together, in a lot of ways, we've codified, we've encoded the magic of the company in a way that no words can describe. And you don't want to lose that. You don't want to lose that. You want to take that and take it to the next level next time. And so I don't want to reset. I don't like working with new people for that reason. Thank you.